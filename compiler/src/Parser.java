
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\006\005\000\002\002\004\000\002\052" +
    "\005\000\002\052\003\000\002\012\007\000\002\007\004" +
    "\000\002\007\003\000\002\010\004\000\002\010\011\000" +
    "\002\010\013\000\002\010\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\004\000\002\013\003\000\002\014\004\000" +
    "\002\014\011\000\002\014\013\000\002\014\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\004\004\000" +
    "\002\004\011\000\002\004\013\000\002\004\005\000\002" +
    "\003\004\000\002\003\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\005\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\006\000\002\024\004\000\002" +
    "\025\004\000\002\026\006\000\002\027\004\000\002\027" +
    "\003\000\002\030\003\000\002\030\004\000\002\031\005" +
    "\000\002\031\004\000\002\031\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\002\003\000\002\002" +
    "\011\000\002\002\013\000\002\044\005\000\002\044\005" +
    "\000\002\033\004\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\032\006\000\002\064\006\000\002" +
    "\064\005\000\002\064\003\000\002\035\003\000\002\035" +
    "\005\000\002\035\004\000\002\035\004\000\002\035\003" +
    "\000\002\045\012\000\002\046\003\000\002\046\006\000" +
    "\002\047\005\000\002\050\003\000\002\050\005\000\002" +
    "\050\007\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\005" +
    "\000\002\051\003\000\002\053\005\000\002\054\005\000" +
    "\002\054\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\007\000\002\057\005\000\002\060\012\000\002\061" +
    "\003\000\002\061\005\000\002\062\006\000\002\063\005" +
    "\000\002\063\003\000\002\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\014\005\004\022\012\027\016\041\uff6b\065" +
    "\017\001\002\000\022\027\063\061\057\063\065\064\061" +
    "\066\064\070\054\071\055\072\060\001\002\000\004\060" +
    "\u0105\001\002\000\006\020\u0103\060\uff79\001\002\000\004" +
    "\002\u0102\001\002\000\004\060\uff7b\001\002\000\004\060" +
    "\uff7c\001\002\000\004\027\373\001\002\000\004\011\053" +
    "\001\002\000\006\011\371\060\uff70\001\002\000\052\006" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\017\uffaa\020\uffaa" +
    "\025\uffaa\031\uffaa\032\uffaa\040\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\056\uffaa\057\uffaa\060\uffaa\077\uffaa" +
    "\001\002\000\056\006\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\017\uffac\020\uffac\025\uffac\031\uffac\032\uffac\034\332" +
    "\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\056" +
    "\uffac\057\uffac\060\uffac\076\uffac\077\uffac\001\002\000\004" +
    "\027\355\001\002\000\004\060\uff7d\001\002\000\006\002" +
    "\ufffe\041\ufffe\001\002\000\054\006\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\017\uffab\020\uffab\025\uffab\031\uffab\032" +
    "\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\056\uffab\057\uffab\060\uffab\076\352\077\uffab\001\002\000" +
    "\004\041\025\001\002\000\014\002\uff6b\005\004\022\012" +
    "\027\016\065\017\001\002\000\004\074\026\001\002\000" +
    "\024\005\004\022\012\027\033\030\034\036\030\050\044" +
    "\054\027\055\032\065\017\001\002\000\004\027\016\001" +
    "\002\000\026\005\004\007\231\022\012\027\033\030\222" +
    "\036\220\050\044\054\027\055\164\065\017\001\002\000" +
    "\004\060\345\001\002\000\004\060\ufff2\001\002\000\060" +
    "\006\uffac\011\uffac\012\uffac\013\uffac\014\uffac\017\uffac\020" +
    "\uffac\025\uffac\031\uffac\032\uffac\034\332\037\330\040\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\056\uffac\057" +
    "\uffac\060\uffac\076\uffac\077\uffac\001\002\000\004\037\316" +
    "\001\002\000\004\060\uffef\001\002\000\004\060\ufff4\001" +
    "\002\000\004\075\314\001\002\000\026\005\004\022\012" +
    "\027\033\030\034\036\030\050\044\054\027\055\032\065" +
    "\017\075\ufffb\001\002\000\004\060\ufff5\001\002\000\004" +
    "\060\ufff1\001\002\000\004\060\ufff6\001\002\000\040\004" +
    "\116\010\075\021\111\024\107\027\033\030\077\033\122" +
    "\034\073\035\120\037\100\042\112\051\113\052\110\062" +
    "\102\073\076\001\002\000\004\060\uffd0\001\002\000\006" +
    "\020\310\060\uffd1\001\002\000\004\060\ufff3\001\002\000" +
    "\004\060\ufff0\001\002\000\006\011\053\020\052\001\002" +
    "\000\040\004\116\010\075\021\111\024\107\027\033\030" +
    "\077\033\122\034\073\035\120\037\100\042\112\051\113" +
    "\052\110\062\102\073\076\001\002\000\022\027\063\061" +
    "\057\063\065\064\061\066\064\070\054\071\055\072\060" +
    "\001\002\000\036\012\uffc6\020\uffc6\026\uffc6\027\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\066\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\075\uffc6\001\002\000\036\012\uffcc\020" +
    "\uffcc\026\uffcc\027\uffcc\057\uffcc\060\uffcc\061\uffcc\063\uffcc" +
    "\064\uffcc\066\uffcc\070\uffcc\071\uffcc\072\uffcc\075\uffcc\001" +
    "\002\000\036\012\uffcb\020\uffcb\026\uffcb\027\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\063\uffcb\064\uffcb\066\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\075\uffcb\001\002\000\004\040\067\001\002" +
    "\000\036\012\uffc5\020\uffc5\026\uffc5\027\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\063\uffc5\064\uffc5\066\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\075\uffc5\001\002\000\036\012\uffca\020\uffca\026" +
    "\uffca\027\uffca\057\uffca\060\uffca\061\uffca\063\uffca\064\uffca" +
    "\066\uffca\070\uffca\071\uffca\072\uffca\075\uffca\001\002\000" +
    "\006\020\uffcf\060\uffcf\001\002\000\036\012\uffc7\020\uffc7" +
    "\026\uffc7\027\uffc7\057\uffc7\060\uffc7\061\uffc7\063\uffc7\064" +
    "\uffc7\066\uffc7\070\uffc7\071\uffc7\072\uffc7\075\uffc7\001\002" +
    "\000\036\012\uffc4\020\uffc4\026\uffc4\027\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\063\uffc4\064\uffc4\066\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\075\uffc4\001\002\000\036\012\uffc9\020\uffc9\026" +
    "\uffc9\027\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\072\uffc9\075\uffc9\001\002\000" +
    "\036\012\uffc8\020\uffc8\026\uffc8\027\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\063\uffc8\064\uffc8\066\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\075\uffc8\001\002\000\022\027\063\061\057\063\065" +
    "\064\061\066\064\070\054\071\055\072\060\001\002\000" +
    "\004\026\071\001\002\000\036\012\uffc3\020\uffc3\026\uffc3" +
    "\027\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\064\uffc3\066" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\075\uffc3\001\002\000\044" +
    "\006\131\012\273\013\133\014\141\017\144\031\134\032" +
    "\143\040\145\042\132\043\135\044\136\045\146\046\140" +
    "\056\uff80\057\uff80\060\uff80\077\142\001\002\000\042\004" +
    "\116\010\075\021\111\024\107\027\033\030\077\033\122" +
    "\034\073\035\120\037\100\042\112\051\113\052\110\056" +
    "\uff6b\062\102\073\076\001\002\000\050\006\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\017\uffb7\025\uffb7\031\uffb7\032" +
    "\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\077\uffb7\001\002\000\050\006" +
    "\uff85\011\uff85\012\uff85\013\uff85\014\uff85\017\uff85\025\uff85" +
    "\031\uff85\032\uff85\040\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\056\uff85\057\uff85\060\uff85\077\uff85\001\002" +
    "\000\050\006\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\017" +
    "\uff8a\025\uff8a\031\uff8a\032\uff8a\040\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\056\uff8a\057\uff8a\060\uff8a\077" +
    "\uff8a\001\002\000\004\037\156\001\002\000\040\004\116" +
    "\010\075\021\111\024\107\027\033\030\077\033\122\034" +
    "\073\035\120\037\100\042\112\051\113\052\110\062\102" +
    "\073\076\001\002\000\050\006\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\017\uff83\025\uff83\031\uff83\032\uff83\040\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\056\uff83\057" +
    "\uff83\060\uff83\077\uff83\001\002\000\050\006\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\017\uff84\025\uff84\031\uff84\032" +
    "\uff84\040\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\056\uff84\057\uff84\060\uff84\077\uff84\001\002\000\050\006" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\017\uffb6\025\uffb6" +
    "\031\uffb6\032\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\056\uffb6\057\uffb6\060\uffb6\077\uffb6\001\002" +
    "\000\050\006\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\017" +
    "\uffb8\025\uffb8\031\uffb8\032\uffb8\040\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\056\uffb8\057\uffb8\060\uffb8\077" +
    "\uffb8\001\002\000\050\006\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\017\uffb4\025\uffb4\031\uffb4\032\uffb4\040\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\077\uffb4\001\002\000\050\006\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\017\uffb3\025\uffb3\031\uffb3\032\uffb3" +
    "\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\077\uffb3\001\002\000\050\006\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\017\uff86\025\uff86\031" +
    "\uff86\032\uff86\040\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\056\uff86\057\uff86\060\uff86\077\uff86\001\002\000" +
    "\050\006\uff87\011\uff87\012\uff87\013\uff87\014\uff87\017\uff87" +
    "\025\uff87\031\uff87\032\uff87\040\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\056\uff87\057\uff87\060\uff87\077\uff87" +
    "\001\002\000\050\006\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\uff89\017\uff89\025\uff89\031\uff89\032\uff89\040\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\056\uff89\057\uff89\060" +
    "\uff89\077\uff89\001\002\000\040\004\uff8b\010\uff8b\021\uff8b" +
    "\024\uff8b\027\uff8b\030\uff8b\033\uff8b\034\uff8b\035\uff8b\037" +
    "\uff8b\042\uff8b\051\uff8b\052\uff8b\062\uff8b\073\uff8b\001\002" +
    "\000\040\004\uff8c\010\uff8c\021\uff8c\024\uff8c\027\uff8c\030" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\042\uff8c\051\uff8c" +
    "\052\uff8c\062\uff8c\073\uff8c\001\002\000\004\060\uffce\001" +
    "\002\000\050\006\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\017\uffb2\025\uffb2\031\uffb2\032\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\077\uffb2\001\002\000\050\006\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\017\uff88\025\uff88\031\uff88\032\uff88\040\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\056\uff88\057" +
    "\uff88\060\uff88\077\uff88\001\002\000\040\004\116\010\075" +
    "\021\111\024\107\027\033\030\077\033\122\034\073\035" +
    "\120\037\100\042\112\051\113\052\110\062\102\073\076" +
    "\001\002\000\004\037\150\001\002\000\050\006\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\017\uffb5\025\uffb5\031\uffb5" +
    "\032\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\077\uffb5\001\002\000\004" +
    "\027\124\001\002\000\004\011\127\001\002\000\006\011" +
    "\uff6c\012\125\001\002\000\004\027\124\001\002\000\004" +
    "\011\uff6d\001\002\000\040\004\116\010\075\021\111\024" +
    "\107\027\033\030\077\033\122\034\073\035\120\037\100" +
    "\042\112\051\113\052\110\062\102\073\076\001\002\000" +
    "\050\006\131\011\uff6e\012\uff6e\013\133\014\141\017\144" +
    "\025\uff6e\031\134\032\143\040\145\042\132\043\135\044" +
    "\136\045\146\046\140\056\uff6e\057\uff6e\060\uff6e\077\142" +
    "\001\002\000\040\004\uff99\010\uff99\021\uff99\024\uff99\027" +
    "\uff99\030\uff99\033\uff99\034\uff99\035\uff99\037\uff99\042\uff99" +
    "\051\uff99\052\uff99\062\uff99\073\uff99\001\002\000\040\004" +
    "\uff91\010\uff91\021\uff91\024\uff91\027\uff91\030\uff91\033\uff91" +
    "\034\uff91\035\uff91\037\uff91\042\uff91\051\uff91\052\uff91\062" +
    "\uff91\073\uff91\001\002\000\040\004\uff97\010\uff97\021\uff97" +
    "\024\uff97\027\uff97\030\uff97\033\uff97\034\uff97\035\uff97\037" +
    "\uff97\042\uff97\051\uff97\052\uff97\062\uff97\073\uff97\001\002" +
    "\000\040\004\uff8d\010\uff8d\021\uff8d\024\uff8d\027\uff8d\030" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\042\uff8d\051\uff8d" +
    "\052\uff8d\062\uff8d\073\uff8d\001\002\000\040\004\uff8f\010" +
    "\uff8f\021\uff8f\024\uff8f\027\uff8f\030\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\037\uff8f\042\uff8f\051\uff8f\052\uff8f\062\uff8f\073" +
    "\uff8f\001\002\000\040\004\uff94\010\uff94\021\uff94\024\uff94" +
    "\027\uff94\030\uff94\033\uff94\034\uff94\035\uff94\037\uff94\042" +
    "\uff94\051\uff94\052\uff94\062\uff94\073\uff94\001\002\000\040" +
    "\004\116\010\075\021\111\024\107\027\033\030\077\033" +
    "\122\034\073\035\120\037\100\042\112\051\113\052\110" +
    "\062\102\073\076\001\002\000\040\004\uff92\010\uff92\021" +
    "\uff92\024\uff92\027\uff92\030\uff92\033\uff92\034\uff92\035\uff92" +
    "\037\uff92\042\uff92\051\uff92\052\uff92\062\uff92\073\uff92\001" +
    "\002\000\040\004\uff90\010\uff90\021\uff90\024\uff90\027\uff90" +
    "\030\uff90\033\uff90\034\uff90\035\uff90\037\uff90\042\uff90\051" +
    "\uff90\052\uff90\062\uff90\073\uff90\001\002\000\040\004\uff8e" +
    "\010\uff8e\021\uff8e\024\uff8e\027\uff8e\030\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\037\uff8e\042\uff8e\051\uff8e\052\uff8e\062\uff8e" +
    "\073\uff8e\001\002\000\040\004\uff95\010\uff95\021\uff95\024" +
    "\uff95\027\uff95\030\uff95\033\uff95\034\uff95\035\uff95\037\uff95" +
    "\042\uff95\051\uff95\052\uff95\062\uff95\073\uff95\001\002\000" +
    "\040\004\uff96\010\uff96\021\uff96\024\uff96\027\uff96\030\uff96" +
    "\033\uff96\034\uff96\035\uff96\037\uff96\042\uff96\051\uff96\052" +
    "\uff96\062\uff96\073\uff96\001\002\000\040\004\uff93\010\uff93" +
    "\021\uff93\024\uff93\027\uff93\030\uff93\033\uff93\034\uff93\035" +
    "\uff93\037\uff93\042\uff93\051\uff93\052\uff93\062\uff93\073\uff93" +
    "\001\002\000\040\004\uff98\010\uff98\021\uff98\024\uff98\027" +
    "\uff98\030\uff98\033\uff98\034\uff98\035\uff98\037\uff98\042\uff98" +
    "\051\uff98\052\uff98\062\uff98\073\uff98\001\002\000\050\006" +
    "\131\011\uffbb\012\uffbb\013\133\014\141\017\144\025\uffbb" +
    "\031\134\032\143\040\145\042\132\043\135\044\136\045" +
    "\146\046\140\056\uffbb\057\uffbb\060\uffbb\077\142\001\002" +
    "\000\040\004\116\010\075\021\111\024\107\027\033\030" +
    "\077\033\122\034\073\035\120\037\100\042\112\051\113" +
    "\052\110\062\102\073\076\001\002\000\036\006\131\013" +
    "\133\014\141\017\144\031\134\032\143\040\145\042\132" +
    "\043\135\044\136\045\146\046\140\057\152\077\142\001" +
    "\002\000\050\006\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\017\uffa9\025\uffa9\031\uffa9\032\uffa9\040\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\077\uffa9\001\002\000\050\006\131\011\uffba\012\uffba\013" +
    "\133\014\141\017\144\025\uffba\031\134\032\143\040\145" +
    "\042\132\043\135\044\136\045\146\046\140\056\uffba\057" +
    "\uffba\060\uffba\077\142\001\002\000\036\006\131\013\133" +
    "\014\141\017\144\031\134\032\143\040\145\042\132\043" +
    "\135\044\136\045\146\046\140\057\155\077\142\001\002" +
    "\000\050\006\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\017" +
    "\uffb9\025\uffb9\031\uffb9\032\uffb9\040\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\056\uffb9\057\uffb9\060\uffb9\077" +
    "\uffb9\001\002\000\040\004\116\010\075\021\111\024\107" +
    "\027\033\030\077\033\122\034\073\035\120\037\100\042" +
    "\112\051\113\052\110\062\102\073\076\001\002\000\036" +
    "\006\131\013\133\014\141\017\144\031\134\032\143\040" +
    "\145\042\132\043\135\044\136\045\146\046\140\057\160" +
    "\077\142\001\002\000\004\067\161\001\002\000\024\005" +
    "\004\022\012\027\033\030\165\036\163\050\044\054\027" +
    "\055\164\065\017\001\002\000\004\060\256\001\002\000" +
    "\026\005\004\007\231\022\012\027\033\030\222\036\220" +
    "\050\044\054\027\055\164\065\017\001\002\000\042\004" +
    "\116\010\075\021\111\024\107\027\033\030\077\033\122" +
    "\034\073\035\120\037\100\042\112\051\113\052\110\060" +
    "\uffbe\062\102\073\076\001\002\000\004\037\205\001\002" +
    "\000\004\060\uffd2\001\002\000\004\060\uffd7\001\002\000" +
    "\006\015\202\023\201\001\002\000\032\005\004\015\uffed" +
    "\022\012\023\uffed\027\033\030\165\036\163\050\044\054" +
    "\027\055\164\065\017\075\uffed\001\002\000\004\060\uffd8" +
    "\001\002\000\004\060\uffd4\001\002\000\004\060\uffd9\001" +
    "\002\000\004\060\uffd6\001\002\000\004\060\uffd3\001\002" +
    "\000\004\060\uffd5\001\002\000\010\015\uffee\023\uffee\075" +
    "\uffee\001\002\000\050\006\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\017\uffb1\025\uffb1\031\uffb1\032\uffb1\040\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\077\uffb1\001\002\000\024\005\004\022\012\027" +
    "\033\030\165\036\163\050\044\054\027\055\164\065\017" +
    "\001\002\000\004\023\204\001\002\000\050\006\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0\025\uffb0\031\uffb0" +
    "\032\uffb0\040\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\077\uffb0\001\002\000\040" +
    "\004\116\010\075\021\111\024\107\027\033\030\077\033" +
    "\122\034\073\035\120\037\100\042\112\051\113\052\110" +
    "\062\102\073\076\001\002\000\036\006\131\013\133\014" +
    "\141\017\144\031\134\032\143\040\145\042\132\043\135" +
    "\044\136\045\146\046\140\057\207\077\142\001\002\000" +
    "\004\067\210\001\002\000\024\005\004\022\012\027\033" +
    "\030\165\036\163\050\044\054\027\055\164\065\017\001" +
    "\002\000\006\015\213\023\212\001\002\000\032\005\uffeb" +
    "\015\uffeb\022\uffeb\023\uffeb\027\uffeb\030\uffeb\036\uffeb\050" +
    "\uffeb\054\uffeb\055\uffeb\065\uffeb\075\uffeb\001\002\000\024" +
    "\005\004\022\012\027\033\030\165\036\163\050\044\054" +
    "\027\055\164\065\017\001\002\000\004\023\215\001\002" +
    "\000\032\005\uffea\015\uffea\022\uffea\023\uffea\027\uffea\030" +
    "\uffea\036\uffea\050\uffea\054\uffea\055\uffea\065\uffea\075\uffea" +
    "\001\002\000\036\006\131\013\133\014\141\017\144\031" +
    "\134\032\143\040\145\042\132\043\135\044\136\045\146" +
    "\046\140\060\uffbf\077\142\001\002\000\004\060\uffe4\001" +
    "\002\000\026\005\004\007\231\022\012\027\033\030\222" +
    "\036\220\050\044\054\027\055\164\065\017\001\002\000" +
    "\004\060\253\001\002\000\004\037\241\001\002\000\004" +
    "\060\uffe0\001\002\000\004\060\uffe6\001\002\000\004\047" +
    "\240\001\002\000\032\005\004\007\231\015\uffda\022\012" +
    "\027\033\030\222\036\220\047\uffda\050\044\054\027\055" +
    "\164\065\017\001\002\000\004\060\uffe7\001\002\000\004" +
    "\060\uffe2\001\002\000\006\004\236\060\uffbd\001\002\000" +
    "\004\060\uffe8\001\002\000\004\060\uffe5\001\002\000\004" +
    "\060\uffe1\001\002\000\004\060\uffe3\001\002\000\004\060" +
    "\uffbc\001\002\000\006\015\uffdb\047\uffdb\001\002\000\032" +
    "\005\uffe9\015\uffe9\022\uffe9\023\uffe9\027\uffe9\030\uffe9\036" +
    "\uffe9\050\uffe9\054\uffe9\055\uffe9\065\uffe9\075\uffe9\001\002" +
    "\000\040\004\116\010\075\021\111\024\107\027\033\030" +
    "\077\033\122\034\073\035\120\037\100\042\112\051\113" +
    "\052\110\062\102\073\076\001\002\000\036\006\131\013" +
    "\133\014\141\017\144\031\134\032\143\040\145\042\132" +
    "\043\135\044\136\045\146\046\140\057\243\077\142\001" +
    "\002\000\004\067\244\001\002\000\026\005\004\007\231" +
    "\022\012\027\033\030\222\036\220\050\044\054\027\055" +
    "\164\065\017\001\002\000\004\015\250\001\002\000\032" +
    "\005\004\007\231\015\uffda\022\012\023\247\027\033\030" +
    "\222\036\220\050\044\054\027\055\164\065\017\001\002" +
    "\000\034\005\uffde\007\uffde\015\uffde\022\uffde\023\uffde\027" +
    "\uffde\030\uffde\036\uffde\047\uffde\050\uffde\054\uffde\055\uffde" +
    "\065\uffde\001\002\000\026\005\004\007\231\022\012\027" +
    "\033\030\222\036\220\050\044\054\027\055\164\065\017" +
    "\001\002\000\004\023\252\001\002\000\034\005\uffdd\007" +
    "\uffdd\015\uffdd\022\uffdd\023\uffdd\027\uffdd\030\uffdd\036\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\055\uffdd\065\uffdd\001\002\000" +
    "\034\005\uffdf\007\uffdf\015\uffdf\022\uffdf\023\uffdf\027\uffdf" +
    "\030\uffdf\036\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\065" +
    "\uffdf\001\002\000\004\047\255\001\002\000\034\005\uffdc" +
    "\007\uffdc\015\uffdc\022\uffdc\023\uffdc\027\uffdc\030\uffdc\036" +
    "\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\065\uffdc\001\002" +
    "\000\032\005\uffec\015\uffec\022\uffec\023\uffec\027\uffec\030" +
    "\uffec\036\uffec\050\uffec\054\uffec\055\uffec\065\uffec\075\uffec" +
    "\001\002\000\042\006\131\012\273\013\133\014\141\017" +
    "\144\025\272\031\134\032\143\040\145\042\132\043\135" +
    "\044\136\045\146\046\140\056\uff80\077\142\001\002\000" +
    "\004\056\271\001\002\000\006\012\266\056\uff9f\001\002" +
    "\000\004\056\265\001\002\000\006\056\uff7f\057\uff7f\001" +
    "\002\000\006\056\uff7e\057\uff7e\001\002\000\054\006\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\017\uff9d\020\uff9d\025" +
    "\uff9d\031\uff9d\032\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\056\uff9d\057\uff9d\060\uff9d\076\uff9d\077" +
    "\uff9d\001\002\000\004\030\267\001\002\000\040\004\116" +
    "\010\075\021\111\024\107\027\033\030\077\033\122\034" +
    "\073\035\120\037\100\042\112\051\113\052\110\062\102" +
    "\073\076\001\002\000\036\006\131\013\133\014\141\017" +
    "\144\031\134\032\143\040\145\042\132\043\135\044\136" +
    "\045\146\046\140\056\uff9e\077\142\001\002\000\050\006" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\017\uff82\025\uff82" +
    "\031\uff82\032\uff82\040\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\056\uff82\057\uff82\060\uff82\077\uff82\001\002" +
    "\000\004\027\275\001\002\000\040\004\116\010\075\021" +
    "\111\024\107\027\033\030\077\033\122\034\073\035\120" +
    "\037\100\042\112\051\113\052\110\062\102\073\076\001" +
    "\002\000\010\056\uff81\057\uff81\060\uff81\001\002\000\004" +
    "\031\276\001\002\000\004\053\277\001\002\000\004\037" +
    "\300\001\002\000\040\004\116\010\075\021\111\024\107" +
    "\027\033\030\077\033\122\034\073\035\120\037\100\042" +
    "\112\051\113\052\110\062\102\073\076\001\002\000\040" +
    "\006\131\012\304\013\133\014\141\017\144\031\134\032" +
    "\143\040\145\042\132\043\135\044\136\045\146\046\140" +
    "\057\uff9c\077\142\001\002\000\004\057\303\001\002\000" +
    "\006\012\uffa0\056\uffa0\001\002\000\040\004\116\010\075" +
    "\021\111\024\107\027\033\030\077\033\122\034\073\035" +
    "\120\037\100\042\112\051\113\052\110\062\102\073\076" +
    "\001\002\000\040\006\131\012\306\013\133\014\141\017" +
    "\144\031\134\032\143\040\145\042\132\043\135\044\136" +
    "\045\146\046\140\057\uff9b\077\142\001\002\000\040\004" +
    "\116\010\075\021\111\024\107\027\033\030\077\033\122" +
    "\034\073\035\120\037\100\042\112\051\113\052\110\062" +
    "\102\073\076\001\002\000\036\006\131\013\133\014\141" +
    "\017\144\031\134\032\143\040\145\042\132\043\135\044" +
    "\136\045\146\046\140\057\uff9a\077\142\001\002\000\040" +
    "\004\116\010\075\021\111\024\107\027\033\030\077\033" +
    "\122\034\073\035\120\037\100\042\112\051\113\052\110" +
    "\062\102\073\076\001\002\000\004\060\uffcd\001\002\000" +
    "\036\006\131\013\133\014\141\017\144\031\134\032\143" +
    "\040\145\042\132\043\135\044\136\045\146\046\140\060" +
    "\uffc1\077\142\001\002\000\004\075\ufffc\001\002\000\004" +
    "\060\315\001\002\000\014\002\ufffd\005\ufffd\022\ufffd\027" +
    "\ufffd\065\ufffd\001\002\000\040\004\116\010\075\021\111" +
    "\024\107\027\033\030\077\033\122\034\073\035\120\037" +
    "\100\042\112\051\113\052\110\062\102\073\076\001\002" +
    "\000\036\006\131\013\133\014\141\017\144\031\134\032" +
    "\143\040\145\042\132\043\135\044\136\045\146\046\140" +
    "\057\320\077\142\001\002\000\004\067\321\001\002\000" +
    "\024\005\004\022\012\027\033\030\165\036\163\050\044" +
    "\054\027\055\164\065\017\001\002\000\006\015\324\023" +
    "\323\001\002\000\026\005\ufff9\022\ufff9\027\ufff9\030\ufff9" +
    "\036\ufff9\050\ufff9\054\ufff9\055\ufff9\065\ufff9\075\ufff9\001" +
    "\002\000\024\005\004\022\012\027\033\030\165\036\163" +
    "\050\044\054\027\055\164\065\017\001\002\000\004\023" +
    "\326\001\002\000\026\005\ufff8\022\ufff8\027\ufff8\030\ufff8" +
    "\036\ufff8\050\ufff8\054\ufff8\055\ufff8\065\ufff8\075\ufff8\001" +
    "\002\000\054\006\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\017\uffa6\020\uffa6\025\uffa6\031\uffa6\032\uffa6\040\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\076\uffa6\077\uffa6\001\002\000\042\004\116\010" +
    "\075\021\111\024\107\027\033\030\077\033\122\034\073" +
    "\035\120\037\100\042\112\051\113\052\110\057\uff6b\062" +
    "\102\073\076\001\002\000\054\006\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\017\uffad\020\uffad\025\uffad\031\uffad\032" +
    "\uffad\040\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\056\uffad\057\uffad\060\uffad\076\uffad\077\uffad\001\002\000" +
    "\042\004\116\010\075\011\335\021\111\024\107\027\033" +
    "\030\077\033\122\034\073\035\120\037\100\042\112\051" +
    "\113\052\110\062\102\073\076\001\002\000\042\006\131" +
    "\011\341\013\133\014\141\017\144\025\272\031\134\032" +
    "\143\040\145\042\132\043\135\044\136\045\146\046\140" +
    "\056\uffa5\077\142\001\002\000\004\056\337\001\002\000" +
    "\042\004\116\010\075\021\111\024\107\027\033\030\077" +
    "\033\122\034\073\035\120\037\100\042\112\051\113\052" +
    "\110\056\uffa1\062\102\073\076\001\002\000\036\006\131" +
    "\013\133\014\141\017\144\031\134\032\143\040\145\042" +
    "\132\043\135\044\136\045\146\046\140\056\uffa2\077\142" +
    "\001\002\000\056\006\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\017\uffa7\020\uffa7\025\uffa7\031\uffa7\032\uffa7\034\332" +
    "\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\076\uffa7\077\uffa7\001\002\000\054" +
    "\006\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\017\uffa8\020" +
    "\uffa8\025\uffa8\031\uffa8\032\uffa8\040\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\056\uffa8\057\uffa8\060\uffa8\076" +
    "\uffa8\077\uffa8\001\002\000\042\004\116\010\075\021\111" +
    "\024\107\027\033\030\077\033\122\034\073\035\120\037" +
    "\100\042\112\051\113\052\110\056\uffa3\062\102\073\076" +
    "\001\002\000\036\006\131\013\133\014\141\017\144\031" +
    "\134\032\143\040\145\042\132\043\135\044\136\045\146" +
    "\046\140\056\uffa4\077\142\001\002\000\004\057\344\001" +
    "\002\000\050\006\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\017\uffc0\025\uffc0\031\uffc0\032\uffc0\040\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\077\uffc0\001\002\000\026\005\ufffa\022\ufffa\027\ufffa\030" +
    "\ufffa\036\ufffa\050\ufffa\054\ufffa\055\ufffa\065\ufffa\075\ufffa" +
    "\001\002\000\004\047\347\001\002\000\026\005\ufff7\022" +
    "\ufff7\027\ufff7\030\ufff7\036\ufff7\050\ufff7\054\ufff7\055\ufff7" +
    "\065\ufff7\075\ufff7\001\002\000\004\060\uffc2\001\002\000" +
    "\004\002\001\001\002\000\004\027\016\001\002\000\054" +
    "\006\uffae\011\uffae\012\uffae\013\uffae\014\uffae\017\uffae\020" +
    "\uffae\025\uffae\031\uffae\032\uffae\040\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\056\uffae\057\uffae\060\uffae\076" +
    "\352\077\uffae\001\002\000\052\006\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\017\uffaf\020\uffaf\025\uffaf\031\uffaf\032" +
    "\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\077\uffaf\001\002\000\004\074" +
    "\356\001\002\000\006\027\362\075\uff6b\001\002\000\006" +
    "\057\uff75\075\uff75\001\002\000\010\012\367\057\uff76\075" +
    "\uff76\001\002\000\004\075\366\001\002\000\004\011\364" +
    "\001\002\000\006\057\uff74\075\uff74\001\002\000\022\027" +
    "\063\061\057\063\065\064\061\066\064\070\054\071\055" +
    "\072\060\001\002\000\010\012\uff78\057\uff78\075\uff78\001" +
    "\002\000\004\060\uff73\001\002\000\004\027\362\001\002" +
    "\000\006\057\uff77\075\uff77\001\002\000\022\027\063\061" +
    "\057\063\065\064\061\066\064\070\054\071\055\072\060" +
    "\001\002\000\004\060\uff6f\001\002\000\004\037\374\001" +
    "\002\000\006\027\362\057\uff6b\001\002\000\004\057\376" +
    "\001\002\000\004\074\377\001\002\000\024\005\004\022" +
    "\012\027\033\030\165\036\163\050\044\054\027\055\164" +
    "\065\017\001\002\000\004\075\u0101\001\002\000\006\011" +
    "\uff71\060\uff71\001\002\000\004\002\000\001\002\000\040" +
    "\004\116\010\075\021\111\024\107\027\033\030\077\033" +
    "\122\034\073\035\120\037\100\042\112\051\113\052\110" +
    "\062\102\073\076\001\002\000\004\060\uff7a\001\002\000" +
    "\016\002\uff6b\005\004\022\012\027\016\041\uff6b\065\017" +
    "\001\002\000\006\002\uffff\041\uffff\001\002\000\022\027" +
    "\063\061\057\063\065\064\061\066\064\070\054\071\055" +
    "\072\060\001\002\000\004\060\uff72\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\032\006\006\017\005\033\021\034\012\044" +
    "\014\051\004\052\022\056\017\057\010\060\013\061\007" +
    "\065\020\001\001\000\010\021\u0106\022\055\023\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\326\064\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\023" +
    "\001\001\000\030\017\005\033\021\034\012\044\014\051" +
    "\004\052\350\056\017\057\010\060\013\061\007\065\020" +
    "\001\001\000\002\001\001\000\042\007\036\010\037\011" +
    "\030\016\042\017\045\020\044\024\040\025\035\026\046" +
    "\033\021\034\050\044\014\056\047\057\041\060\013\061" +
    "\034\001\001\000\010\033\021\034\347\044\014\001\001" +
    "\000\046\003\345\004\225\005\220\016\231\017\045\020" +
    "\044\024\226\025\223\026\232\027\234\030\216\033\021" +
    "\034\050\044\014\056\233\057\227\060\013\061\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\326" +
    "\064\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\007\312\010\037" +
    "\011\030\016\042\017\045\020\044\024\040\025\035\026" +
    "\046\033\021\034\050\044\014\056\047\057\041\060\013" +
    "\061\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\103\026\114\031\311\032\102" +
    "\033\021\034\120\037\116\040\073\041\100\044\014\047" +
    "\105\062\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\103\026\114\031\071\032\102\033\021\034\120" +
    "\037\116\040\073\041\100\042\113\044\014\047\105\062" +
    "\104\001\001\000\010\021\061\022\055\023\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\067\022\055\023\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\136\001\001\000\044\002\103\026\114\031\256\032\102" +
    "\033\021\034\120\037\116\040\073\041\100\042\262\043" +
    "\257\044\014\045\260\046\261\047\105\062\104\065\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\103\026\114\031\153" +
    "\032\102\033\021\034\120\037\116\040\073\041\100\044" +
    "\014\047\105\062\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\103\026\114\031\152\032\102\033\021\034\120\037" +
    "\116\040\073\041\100\044\014\047\105\062\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\125" +
    "\001\001\000\002\001\001\000\032\002\103\026\114\031" +
    "\127\032\102\033\021\034\120\037\116\040\073\041\100" +
    "\044\014\047\105\062\104\001\001\000\004\036\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\103\026\114\031\146\032\102\033\021\034\120" +
    "\037\116\040\073\041\100\044\014\047\105\062\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\136\001\001\000\032\002\103" +
    "\026\114\031\150\032\102\033\021\034\120\037\116\040" +
    "\073\041\100\044\014\047\105\062\104\001\001\000\004" +
    "\036\136\001\001\000\002\001\001\000\004\036\136\001" +
    "\001\000\004\036\136\001\001\000\002\001\001\000\032" +
    "\002\103\026\114\031\156\032\102\033\021\034\120\037" +
    "\116\040\073\041\100\044\014\047\105\062\104\001\001" +
    "\000\004\036\136\001\001\000\002\001\001\000\044\013" +
    "\167\014\170\015\161\016\173\017\045\020\044\024\171" +
    "\025\166\026\174\027\176\033\021\034\050\044\014\056" +
    "\175\057\172\060\013\061\165\001\001\000\002\001\001" +
    "\000\046\003\224\004\225\005\220\016\231\017\045\020" +
    "\044\024\226\025\223\026\232\027\234\030\216\033\021" +
    "\034\050\044\014\056\233\057\227\060\013\061\222\001" +
    "\001\000\032\002\103\026\114\031\215\032\102\033\021" +
    "\034\120\037\116\040\073\041\100\044\014\047\105\062" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\013\177\014\170\015" +
    "\161\016\173\017\045\020\044\024\171\025\166\026\174" +
    "\027\176\033\021\034\050\044\014\056\175\057\172\060" +
    "\013\061\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\202\014\170\015\161\016\173\017\045\020\044\024" +
    "\171\025\166\026\174\027\176\033\021\034\050\044\014" +
    "\056\175\057\172\060\013\061\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\103\026\114\031\205" +
    "\032\102\033\021\034\120\037\116\040\073\041\100\044" +
    "\014\047\105\062\104\001\001\000\004\036\136\001\001" +
    "\000\002\001\001\000\044\013\210\014\170\015\161\016" +
    "\173\017\045\020\044\024\171\025\166\026\174\027\176" +
    "\033\021\034\050\044\014\056\175\057\172\060\013\061" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\213\014\170\015\161\016\173\017\045\020\044\024" +
    "\171\025\166\026\174\027\176\033\021\034\050\044\014" +
    "\056\175\057\172\060\013\061\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\136\001\001\000\002" +
    "\001\001\000\046\003\253\004\225\005\220\016\231\017" +
    "\045\020\044\024\226\025\223\026\232\027\234\030\216" +
    "\033\021\034\050\044\014\056\233\057\227\060\013\061" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\236\004\225\005\220\016\231\017\045\020\044\024\226" +
    "\025\223\026\232\027\234\030\216\033\021\034\050\044" +
    "\014\056\233\057\227\060\013\061\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\103\026\114\031\241\032\102\033\021\034\120" +
    "\037\116\040\073\041\100\044\014\047\105\062\104\001" +
    "\001\000\004\036\136\001\001\000\002\001\001\000\046" +
    "\003\244\004\245\005\220\016\231\017\045\020\044\024" +
    "\226\025\223\026\232\027\234\030\216\033\021\034\050" +
    "\044\014\056\233\057\227\060\013\061\222\001\001\000" +
    "\002\001\001\000\046\003\236\004\225\005\220\016\231" +
    "\017\045\020\044\024\226\025\223\026\232\027\234\030" +
    "\216\033\021\034\050\044\014\056\233\057\227\060\013" +
    "\061\222\001\001\000\002\001\001\000\044\004\250\005" +
    "\220\016\231\017\045\020\044\024\226\025\223\026\232" +
    "\027\234\030\216\033\021\034\050\044\014\056\233\057" +
    "\227\060\013\061\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\103\026\114\031\267\032\102\033\021\034" +
    "\120\037\116\040\073\041\100\044\014\047\105\062\104" +
    "\001\001\000\004\036\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\103\026\114\031\071\032\102" +
    "\033\021\034\120\037\116\040\073\041\100\042\273\044" +
    "\014\047\105\062\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\103\026\114\031\300\032\102\033\021\034\120\037\116" +
    "\040\073\041\100\044\014\047\105\050\301\062\104\001" +
    "\001\000\004\036\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\103\026\114\031\304\032\102\033" +
    "\021\034\120\037\116\040\073\041\100\044\014\047\105" +
    "\062\104\001\001\000\004\036\136\001\001\000\032\002" +
    "\103\026\114\031\306\032\102\033\021\034\120\037\116" +
    "\040\073\041\100\044\014\047\105\062\104\001\001\000" +
    "\004\036\136\001\001\000\034\002\103\026\114\031\071" +
    "\032\102\033\021\034\120\037\116\040\073\041\100\042" +
    "\310\044\014\047\105\062\104\001\001\000\002\001\001" +
    "\000\004\036\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\103\026\114\031\316" +
    "\032\102\033\021\034\120\037\116\040\073\041\100\044" +
    "\014\047\105\062\104\001\001\000\004\036\136\001\001" +
    "\000\002\001\001\000\044\013\321\014\170\015\161\016" +
    "\173\017\045\020\044\024\171\025\166\026\174\027\176" +
    "\033\021\034\050\044\014\056\175\057\172\060\013\061" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\324\014\170\015\161\016\173\017\045\020\044\024" +
    "\171\025\166\026\174\027\176\033\021\034\050\044\014" +
    "\056\175\057\172\060\013\061\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\103" +
    "\026\114\031\071\032\102\033\021\034\120\037\116\040" +
    "\073\041\100\042\262\043\342\044\014\047\105\062\104" +
    "\065\263\001\001\000\002\001\001\000\040\002\103\026" +
    "\114\031\332\032\102\033\021\034\120\035\333\037\116" +
    "\040\073\041\100\044\014\045\260\046\261\047\105\062" +
    "\104\001\001\000\004\036\136\001\001\000\002\001\001" +
    "\000\032\002\103\026\114\031\335\032\102\033\021\034" +
    "\120\037\116\040\073\041\100\044\014\047\105\062\104" +
    "\001\001\000\004\036\136\001\001\000\006\047\326\064" +
    "\337\001\001\000\002\001\001\000\032\002\103\026\114" +
    "\031\341\032\102\033\021\034\120\037\116\040\073\041" +
    "\100\044\014\047\105\062\104\001\001\000\004\036\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\352\044\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\053\357\054\356\055\360\065\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\364\022\055\023\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\357" +
    "\054\367\001\001\000\002\001\001\000\010\021\371\022" +
    "\055\023\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\053\357\054\356\055\374\065\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\013\377\014\170" +
    "\015\161\016\173\017\045\020\044\024\171\025\166\026" +
    "\174\027\176\033\021\034\050\044\014\056\175\057\172" +
    "\060\013\061\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\103\026\114\031\071" +
    "\032\102\033\021\034\120\037\116\040\073\041\100\042" +
    "\u0103\044\014\047\105\062\104\001\001\000\002\001\001" +
    "\000\030\017\005\033\021\034\012\044\014\051\004\052" +
    "\u0105\056\017\057\010\060\013\061\007\065\020\001\001" +
    "\000\002\001\001\000\010\021\u0107\022\055\023\065\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



  static class ErrorInfo {
    public int line;
    public int column;

    public ErrorInfo(int line, int column) {
      this.line = line;
      this.column = column;
    }
  }

  Lexer lexer;

  // used by SC.java to decide whether parsing is successful
  public boolean syntaxErrors;

  public Parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  public void syntax_error(Symbol cur_token) {
    this.syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    this.syntaxErrors = true;
    report_fatal_error(
      "Syntax error at line " + (cur_token.left+1) + ", column "
      + cur_token.right + ".\n", null
    );
  }

  public void custom_err_report(String message, int line, int column)
    throws java.lang.Exception
  {
    this.syntaxErrors = true;
    report_fatal_error( message + "\n", new ErrorInfo(line, column) );
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declaration SEMICOL declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= MAIN LCB body1 RCB SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body1 ::= line1 body1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body1 ::= line1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // line1 ::= statement1 SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // line1 ::= IF LPAREN expr RPAREN THEN body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // line1 ::= IF LPAREN expr RPAREN THEN body ELSE body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // line1 ::= LOOP body2 POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement1 ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement1 ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement1 ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement1 ::= fucntion_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement1 ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement1 ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement1 ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement1 ::= fdef1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body ::= line body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // line ::= statement SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // line ::= IF LPAREN expr RPAREN THEN body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // line ::= IF LPAREN expr RPAREN THEN body ELSE body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // line ::= LOOP body2 POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement2 ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement2 ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement2 ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement2 ::= fucntion_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement2 ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement2 ::= control_flow 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement2 ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement2 ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement2 ::= fdef1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // line2 ::= statement2 SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // line2 ::= IF LPAREN expr RPAREN THEN line2 FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // line2 ::= IF LPAREN expr RPAREN THEN body2 ELSE line2 FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // line2 ::= LOOP body2 POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // body2 ::= line2 body2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // body2 ::= line2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body2",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= fucntion_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= control_flow 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= fdef1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable ::= var1 COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign ::= var1 EQUAL expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign ::= variable EQUAL expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= tnumber 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= TCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= TBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tnumber ::= TINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tnumber",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tnumber ::= TRAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tnumber",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tnumber ::= TFLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tnumber",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // seq ::= SEQ LT type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // input ::= READ var1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // output ::= PRINT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fucntion_call ::= IDENTIFIER LPAREN expr_list1 RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fucntion_call",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // control_flow ::= RETURN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_flow",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control_flow ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_flow",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // break ::= BREAK INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr binary_oprator expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= unary_operator expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= fucntion_call1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= len_seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= var1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= lambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= range2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fucntion_call1 ::= fucntion_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fucntion_call1",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fucntion_call1 ::= IF LPAREN expr RPAREN THEN body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fucntion_call1",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fucntion_call1 ::= IF LPAREN expr RPAREN THEN body ELSE body FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fucntion_call1",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // field_reference ::= var DOT field_reference 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_reference",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // field_reference ::= var DOT var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_reference",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var ::= IDENTIFIER index1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var1 ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var1 ::= field_reference 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // len_seq ::= LEN LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("len_seq",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // index1 ::= LEFTSQ index RIGHTSQ index1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // index1 ::= LEFTSQ index RIGHTSQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // index1 ::= range2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // index ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // index ::= expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // index ::= expr COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // index ::= COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // index ::= COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // range ::= expr FOR IDENTIFIER IN RANGE LPAREN range_content RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // range1 ::= range 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // range1 ::= range COMMA IF expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // range2 ::= LEFTSQ range1 RIGHTSQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // range_content ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // range_content ::= expr COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // range_content ::= expr COMMA expr COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // binary_oprator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // binary_oprator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // binary_oprator ::= CONCATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // binary_oprator ::= ELT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // binary_oprator ::= INIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // binary_oprator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // binary_oprator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // binary_oprator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // binary_oprator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // binary_oprator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // binary_oprator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // binary_oprator ::= POWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // binary_oprator ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_oprator",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary_operator ::= QMARK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constant ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constant ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // constant ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // constant ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // constant ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // constant ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // constant ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // constant ::= sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sequence ::= LEFTSQ expr_list1 RIGHTSQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_list1 ::= expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr_list1 ::= epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declaration ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaration ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaration ::= fdef1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaration ::= variable EQUAL expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declaration ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declare ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declare_list ::= declare COMMA declare_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // declare_list ::= declare 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_list",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declare_list1 ::= declare_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_list1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declare_list1 ::= epsilon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declare_list1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tdef ::= TDEF IDENTIFIER LCB declare_list1 RCB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // alias ::= ALIAS type type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fdef ::= FDEF IDENTIFIER LPAREN declare_list1 RPAREN LCB body RCB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fdef1 ::= fdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fdef1 ::= fdef COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // lambda ::= LAMBDA id_list COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // id_list ::= IDENTIFIER COMMA id_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // id_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("epsilon",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
